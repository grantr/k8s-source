// Code generated by go-swagger; DO NOT EDIT.

// Copyright 2018 The Knative Authors
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//

package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"

	"github.com/go-openapi/runtime"
)

// SyncHookOKCode is the HTTP code returned for type SyncHookOK
const SyncHookOKCode int = 200

/*SyncHookOK OK

swagger:response syncHookOK
*/
type SyncHookOK struct {

	/*
	  In: Body
	*/
	Payload *SyncHookOKBody `json:"body,omitempty"`
}

// NewSyncHookOK creates SyncHookOK with default headers values
func NewSyncHookOK() *SyncHookOK {

	return &SyncHookOK{}
}

// WithPayload adds the payload to the sync hook o k response
func (o *SyncHookOK) WithPayload(payload *SyncHookOKBody) *SyncHookOK {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the sync hook o k response
func (o *SyncHookOK) SetPayload(payload *SyncHookOKBody) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *SyncHookOK) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(200)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

/*SyncHookDefault error

swagger:response syncHookDefault
*/
type SyncHookDefault struct {
	_statusCode int
}

// NewSyncHookDefault creates SyncHookDefault with default headers values
func NewSyncHookDefault(code int) *SyncHookDefault {
	if code <= 0 {
		code = 500
	}

	return &SyncHookDefault{
		_statusCode: code,
	}
}

// WithStatusCode adds the status to the sync hook default response
func (o *SyncHookDefault) WithStatusCode(code int) *SyncHookDefault {
	o._statusCode = code
	return o
}

// SetStatusCode sets the status to the sync hook default response
func (o *SyncHookDefault) SetStatusCode(code int) {
	o._statusCode = code
}

// WriteResponse to the client
func (o *SyncHookDefault) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.Header().Del(runtime.HeaderContentType) //Remove Content-Type on empty responses

	rw.WriteHeader(o._statusCode)
}
