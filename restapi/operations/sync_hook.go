// Code generated by go-swagger; DO NOT EDIT.

// Copyright 2018 The Knative Authors
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//

package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"encoding/json"
	"net/http"

	errors "github.com/go-openapi/errors"
	middleware "github.com/go-openapi/runtime/middleware"
	strfmt "github.com/go-openapi/strfmt"
	swag "github.com/go-openapi/swag"
	validate "github.com/go-openapi/validate"
)

// SyncHookHandlerFunc turns a function with the right signature into a sync hook handler
type SyncHookHandlerFunc func(SyncHookParams) middleware.Responder

// Handle executing the request and returning a response
func (fn SyncHookHandlerFunc) Handle(params SyncHookParams) middleware.Responder {
	return fn(params)
}

// SyncHookHandler interface for that can handle valid sync hook params
type SyncHookHandler interface {
	Handle(SyncHookParams) middleware.Responder
}

// NewSyncHook creates a new http.Handler for the sync hook operation
func NewSyncHook(ctx *middleware.Context, handler SyncHookHandler) *SyncHook {
	return &SyncHook{Context: ctx, Handler: handler}
}

/*SyncHook swagger:route POST /sync syncHook

SyncHook sync hook API

*/
type SyncHook struct {
	Context *middleware.Context
	Handler SyncHookHandler
}

func (o *SyncHook) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		r = rCtx
	}
	var Params = NewSyncHookParams()

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request

	o.Context.Respond(rw, r, route.Produces, route, res)

}

// SyncHookBody sync hook body
// swagger:model SyncHookBody
type SyncHookBody struct {

	// children
	Children interface{} `json:"children,omitempty"`

	// controller
	Controller interface{} `json:"controller,omitempty"`

	// finalizing
	// Required: true
	// Enum: [false]
	Finalizing *bool `json:"finalizing"`

	// parent
	Parent interface{} `json:"parent,omitempty"`
}

// Validate validates this sync hook body
func (o *SyncHookBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateFinalizing(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var syncHookBodyTypeFinalizingPropEnum []interface{}

func init() {
	var res []bool
	if err := json.Unmarshal([]byte(`[false]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		syncHookBodyTypeFinalizingPropEnum = append(syncHookBodyTypeFinalizingPropEnum, v)
	}
}

// prop value enum
func (o *SyncHookBody) validateFinalizingEnum(path, location string, value bool) error {
	if err := validate.Enum(path, location, value, syncHookBodyTypeFinalizingPropEnum); err != nil {
		return err
	}
	return nil
}

func (o *SyncHookBody) validateFinalizing(formats strfmt.Registry) error {

	if err := validate.Required("body"+"."+"finalizing", "body", o.Finalizing); err != nil {
		return err
	}

	// value enum
	if err := o.validateFinalizingEnum("body"+"."+"finalizing", "body", *o.Finalizing); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (o *SyncHookBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *SyncHookBody) UnmarshalBinary(b []byte) error {
	var res SyncHookBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

// SyncHookOKBody sync hook o k body
// swagger:model SyncHookOKBody
type SyncHookOKBody struct {

	// children
	Children []interface{} `json:"children"`

	// status
	Status interface{} `json:"status,omitempty"`
}

// Validate validates this sync hook o k body
func (o *SyncHookOKBody) Validate(formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *SyncHookOKBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *SyncHookOKBody) UnmarshalBinary(b []byte) error {
	var res SyncHookOKBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}
