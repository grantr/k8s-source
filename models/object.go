// Code generated by go-swagger; DO NOT EDIT.

// Copyright 2018 The Knative Authors
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"bytes"
	"encoding/json"
	"io"
	"io/ioutil"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/validate"

	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
)

// Object object
// swagger:discriminator Object kind
type Object interface {
	runtime.Validatable

	// api version
	APIVersion() string
	SetAPIVersion(string)

	// kind
	Kind() string
	SetKind(string)

	// metadata
	Metadata() metav1.ObjectMeta
	SetMetadata(metav1.ObjectMeta)
}

type object struct {
	apiVersionField string

	kindField string

	metadataField metav1.ObjectMeta
}

// APIVersion gets the api version of this polymorphic type
func (m *object) APIVersion() string {
	return m.apiVersionField
}

// SetAPIVersion sets the api version of this polymorphic type
func (m *object) SetAPIVersion(val string) {
	m.apiVersionField = val
}

// Kind gets the kind of this polymorphic type
func (m *object) Kind() string {
	return "Object"
}

// SetKind sets the kind of this polymorphic type
func (m *object) SetKind(val string) {

}

// Metadata gets the metadata of this polymorphic type
func (m *object) Metadata() metav1.ObjectMeta {
	return m.metadataField
}

// SetMetadata sets the metadata of this polymorphic type
func (m *object) SetMetadata(val metav1.ObjectMeta) {
	m.metadataField = val
}

// UnmarshalObjectSlice unmarshals polymorphic slices of Object
func UnmarshalObjectSlice(reader io.Reader, consumer runtime.Consumer) ([]Object, error) {
	var elements []json.RawMessage
	if err := consumer.Consume(reader, &elements); err != nil {
		return nil, err
	}

	var result []Object
	for _, element := range elements {
		obj, err := unmarshalObject(element, consumer)
		if err != nil {
			return nil, err
		}
		result = append(result, obj)
	}
	return result, nil
}

// UnmarshalObject unmarshals polymorphic Object
func UnmarshalObject(reader io.Reader, consumer runtime.Consumer) (Object, error) {
	// we need to read this twice, so first into a buffer
	data, err := ioutil.ReadAll(reader)
	if err != nil {
		return nil, err
	}
	return unmarshalObject(data, consumer)
}

func unmarshalObject(data []byte, consumer runtime.Consumer) (Object, error) {
	buf := bytes.NewBuffer(data)
	buf2 := bytes.NewBuffer(data)

	// the first time this is read is to fetch the value of the kind property.
	var getType struct {
		Kind string `json:"kind"`
	}
	if err := consumer.Consume(buf, &getType); err != nil {
		return nil, err
	}

	if err := validate.RequiredString("kind", "body", getType.Kind); err != nil {
		return nil, err
	}

	// The value of kind is used to determine which type to create and unmarshal the data into
	switch getType.Kind {
	case "KubernetesEventSource":
		var result KubernetesEventSource
		if err := consumer.Consume(buf2, &result); err != nil {
			return nil, err
		}
		return &result, nil

	case "Object":
		var result object
		if err := consumer.Consume(buf2, &result); err != nil {
			return nil, err
		}
		return &result, nil

	}
	return nil, errors.New(422, "invalid kind value: %q", getType.Kind)

}

// Validate validates this object
func (m *object) Validate(formats strfmt.Registry) error {
	return nil
}
